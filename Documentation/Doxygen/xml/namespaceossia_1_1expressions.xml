<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceossia_1_1expressions" kind="namespace" language="C++">
    <compoundname>ossia::expressions</compoundname>
    <innerclass refid="classossia_1_1expressions_1_1expression__atom" prot="public">ossia::expressions::expression_atom</innerclass>
    <innerclass refid="classossia_1_1expressions_1_1expression__bool" prot="public">ossia::expressions::expression_bool</innerclass>
    <innerclass refid="classossia_1_1expressions_1_1expression__composition" prot="public">ossia::expressions::expression_composition</innerclass>
    <innerclass refid="classossia_1_1expressions_1_1expression__not" prot="public">ossia::expressions::expression_not</innerclass>
    <innerclass refid="classossia_1_1expressions_1_1expression__pulse" prot="public">ossia::expressions::expression_pulse</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="expression__fwd_8hpp_1a5843b77f268131e0143f1d4b26b02c3a" prot="public" static="no">
        <type>std::function&lt; void(bool)&gt;</type>
        <definition>using ossia::expressions::expression_result_callback = typedef std::function&lt;void(bool)&gt;</definition>
        <argsstring></argsstring>
        <name>expression_result_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A callback for expressions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression_fwd.hpp" line="15" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression_fwd.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="expression__fwd_8hpp_1a9e7380d9323f67cc1d33d6c3eb68ecd0" prot="public" static="no">
        <type><ref refid="classossia_1_1callback__container" kindref="compound">callback_container</ref>&lt; expression_result_callback &gt;</type>
        <definition>using ossia::expressions::expression_callback_container = typedef callback_container&lt;expression_result_callback&gt;</definition>
        <argsstring></argsstring>
        <name>expression_callback_container</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression_fwd.hpp" line="17" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression_fwd.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="expression__fwd_8hpp_1ab391bd5057bd6267ce8e5caafebd3936" prot="public" static="no">
        <type>typename expression_callback_container::iterator</type>
        <definition>using ossia::expressions::expression_callback_iterator = typedef typename expression_callback_container::iterator</definition>
        <argsstring></argsstring>
        <name>expression_callback_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression_fwd.hpp" line="19" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression_fwd.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="expression__fwd_8hpp_1a2572f0417f2f9f24d69ae0256d0c4af4" prot="public" static="no">
        <type>eggs::variant&lt; <ref refid="classossia_1_1expressions_1_1expression__atom" kindref="compound">expression_atom</ref>, <ref refid="classossia_1_1expressions_1_1expression__bool" kindref="compound">expression_bool</ref>, <ref refid="classossia_1_1expressions_1_1expression__composition" kindref="compound">expression_composition</ref>, <ref refid="classossia_1_1expressions_1_1expression__not" kindref="compound">expression_not</ref>, <ref refid="classossia_1_1expressions_1_1expression__pulse" kindref="compound">expression_pulse</ref> &gt;</type>
        <definition>using ossia::expressions::expression_base = typedef eggs::variant&lt;expression_atom, expression_bool, expression_composition, expression_not, expression_pulse&gt;</definition>
        <argsstring></argsstring>
        <name>expression_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression_fwd.hpp" line="27" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression_fwd.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="expression_8hpp_1a701063e19ef21af8d642842bb2677271" prot="public" static="no" mutable="no">
        <type>const expression_base</type>
        <definition>const expression_base ossia::expressions::expression_true</definition>
        <argsstring></argsstring>
        <name>expression_true</name>
        <initializer>{
    eggs::variants::in_place&lt;<ref refid="classossia_1_1expressions_1_1expression__bool" kindref="compound">expression_bool</ref>&gt;, true}</initializer>
        <briefdescription>
<para>expression_true Convenience constant expression always evaluating to true. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" line="70" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="expression_8hpp_1a8e11fc10aba4209cc74bad09efa1fed5" prot="public" static="no" mutable="no">
        <type>const expression_base</type>
        <definition>const expression_base ossia::expressions::expression_false</definition>
        <argsstring></argsstring>
        <name>expression_false</name>
        <initializer>{
    eggs::variants::in_place&lt;<ref refid="classossia_1_1expressions_1_1expression__bool" kindref="compound">expression_bool</ref>&gt;, false}</initializer>
        <briefdescription>
<para>expression_true Convenience constant expression always evaluating to false. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" line="76" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="expression_8cpp_1ab25b60440c52197ed51b5883336a3f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>OSSIA_EXPORT bool ossia::expressions::evaluate</definition>
        <argsstring>(const expression_base &amp;e)</argsstring>
        <name>evaluate</name>
        <param>
          <type>const expression_base &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>evaluate </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>An expression </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The truth value of the expression </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" line="144" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="expression_8cpp_1a38f241839c5b64921e0add51d56ba1ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>OSSIA_EXPORT void ossia::expressions::update</definition>
        <argsstring>(const expression_base &amp;e)</argsstring>
        <name>update</name>
        <param>
          <type>const expression_base &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>update </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>An expression</para></parameterdescription>
</parameteritem>
</parameterlist>
Recursively asks an expression to query the addresses that it refers, in order to check if the value has changed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" line="149" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="expression_8cpp_1ac502403f7d41026078e15754a4a60a91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>OSSIA_EXPORT bool ossia::expressions::operator!=</definition>
        <argsstring>(const expression_base &amp;lhs, const expression_base &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const expression_base &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const expression_base &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" line="154" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="expression_8cpp_1a04f61e05bd962db85be6f48657338195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>OSSIA_EXPORT bool ossia::expressions::operator==</definition>
        <argsstring>(const expression_base &amp;lhs, const expression_base &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const expression_base &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const expression_base &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>operator==(const expression_base&amp; lhs, const expression_base&amp; rhs) Compares two expressions. </para>        </briefdescription>
        <detaileddescription>
<para>Two expressions are comparable if they have all the same terms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" line="159" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="expression_8cpp_1ae10ddfb041a431e74417f937ff069d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>expression_callback_iterator</type>
        <definition>OSSIA_EXPORT expression_callback_iterator ossia::expressions::add_callback</definition>
        <argsstring>(expression_base &amp;, expression_result_callback)</argsstring>
        <name>add_callback</name>
        <param>
          <type>expression_base &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>expression_result_callback</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>add_callback Add a callback to an expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" line="165" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="expression_8cpp_1a4dbf5ad0d50104ca5a88ad1db4519559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>OSSIA_EXPORT void ossia::expressions::remove_callback</definition>
        <argsstring>(expression_base &amp;, expression_callback_iterator)</argsstring>
        <name>remove_callback</name>
        <param>
          <type>expression_base &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>expression_callback_iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>remove_callback Remove a callback to an expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" line="170" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="expression_8cpp_1ae564f7a77aea28487a6e040636f2660c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>OSSIA_EXPORT std::size_t ossia::expressions::callback_count</definition>
        <argsstring>(expression_base &amp;)</argsstring>
        <name>callback_count</name>
        <param>
          <type>expression_base &amp;</type>
          <defname>e</defname>
        </param>
        <briefdescription>
<para>callback_count </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of callbacks in an expression. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" line="175" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="expression_8hpp_1af56b146b5595d9ba3d7ed973a2f95bec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>OSSIA_EXPORT bool</type>
        <definition>OSSIA_EXPORT bool ossia::expressions::evaluate</definition>
        <argsstring>(const expression_ptr &amp;e)</argsstring>
        <name>evaluate</name>
        <param>
          <type>const expression_ptr &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" line="29" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="expression_8hpp_1ad4ef4636d10b777e1a4f8f51ab2ae7ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>OSSIA_EXPORT void</type>
        <definition>OSSIA_EXPORT void ossia::expressions::update</definition>
        <argsstring>(const expression_ptr &amp;e)</argsstring>
        <name>update</name>
        <param>
          <type>const expression_ptr &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" line="33" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="expression_8hpp_1a27100f6b5aad9e179e5c88129fbf8fd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>OSSIA_EXPORT expression_ptr</type>
        <definition>OSSIA_EXPORT expression_ptr ossia::expressions::make_expression_true</definition>
        <argsstring>()</argsstring>
        <name>make_expression_true</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The following functions are factories used to create expressions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" line="85" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="expression_8hpp_1a83a12ebf7eb5593b966373ad6bcb3085" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>OSSIA_EXPORT expression_ptr</type>
        <definition>OSSIA_EXPORT expression_ptr ossia::expressions::make_expression_false</definition>
        <argsstring>()</argsstring>
        <name>make_expression_false</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" line="90" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="expression_8hpp_1ada2ed1ef7881fb0ab86e83c60c211e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>expression_ptr</type>
        <definition>expression_ptr ossia::expressions::make_expression_atom</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>make_expression_atom</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" line="97" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="expression_8hpp_1ab293846102b005493c5449c84ecb1fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>expression_ptr</type>
        <definition>expression_ptr ossia::expressions::make_expression_bool</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>make_expression_bool</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" line="104" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="expression_8hpp_1ac17d74556c0a3314ed8216f72e745788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>expression_ptr</type>
        <definition>expression_ptr ossia::expressions::make_expression_composition</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>make_expression_composition</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" line="111" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="expression_8hpp_1a8bddcdd2d4977f65c2964b20cc486653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>expression_ptr</type>
        <definition>expression_ptr ossia::expressions::make_expression_not</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>make_expression_not</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" line="119" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="expression_8hpp_1ad1dc3c5a7484ccc462e8348a84616352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>expression_ptr</type>
        <definition>expression_ptr ossia::expressions::make_expression_pulse</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>make_expression_pulse</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" line="126" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.hpp" bodystart="126" bodyend="130"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/tmp/i-score/API/OSSIA/ossia/editor/expression/expression.cpp" line="6" column="1"/>
  </compounddef>
</doxygen>
