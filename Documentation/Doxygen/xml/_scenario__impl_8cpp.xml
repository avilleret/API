<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_scenario__impl_8cpp" kind="file" language="C++">
    <compoundname>Scenario_impl.cpp</compoundname>
    <includes refid="_scenario__impl_8hpp" local="yes">Scenario_impl.hpp</includes>
    <includes refid="algorithms_8hpp" local="no">ossia/detail/algorithms.hpp</includes>
    <includes local="no">iostream</includes>
    <includes local="no">unordered_map</includes>
    <incdepgraph>
      <node id="4251">
        <label>list</label>
      </node>
      <node id="4236">
        <label>ossia/editor/value/impulse.hpp</label>
        <link refid="impulse_8hpp_source"/>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4271">
        <label>atomic</label>
      </node>
      <node id="4257">
        <label>ossia/network/domain/detail/domain_visitors.hpp</label>
        <link refid="domain__visitors_8hpp_source"/>
        <childnode refid="4258" relation="include">
        </childnode>
      </node>
      <node id="4216">
        <label>functional</label>
      </node>
      <node id="4218">
        <label>ossia/editor/scenario/time_process.hpp</label>
        <link refid="time__process_8hpp_source"/>
        <childnode refid="4219" relation="include">
        </childnode>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
        <childnode refid="4239" relation="include">
        </childnode>
      </node>
      <node id="4282">
        <label>iterator</label>
      </node>
      <node id="4260">
        <label>ossia/editor/value/value_traits.hpp</label>
        <link refid="value__traits_8hpp_source"/>
        <childnode refid="4222" relation="include">
        </childnode>
      </node>
      <node id="4221">
        <label>ossia/editor/state/message.hpp</label>
        <link refid="message_8hpp_source"/>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4222" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
        <childnode refid="4226" relation="include">
        </childnode>
      </node>
      <node id="4279">
        <label>ossia/editor/scenario/detail/TimeProcess_impl.hpp</label>
        <link refid="_time_process__impl_8hpp_source"/>
        <childnode refid="4212" relation="include">
        </childnode>
      </node>
      <node id="4240">
        <label>ossia/editor/value/tuple.hpp</label>
        <link refid="tuple_8hpp_source"/>
        <childnode refid="4233" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
        <childnode refid="4234" relation="include">
        </childnode>
      </node>
      <node id="4276">
        <label>TimeEvent_impl.hpp</label>
        <link refid="_time_event__impl_8hpp_source"/>
        <childnode refid="4253" relation="include">
        </childnode>
        <childnode refid="4247" relation="include">
        </childnode>
        <childnode refid="4248" relation="include">
        </childnode>
        <childnode refid="4252" relation="include">
        </childnode>
        <childnode refid="4244" relation="include">
        </childnode>
        <childnode refid="4209" relation="include">
        </childnode>
        <childnode refid="4277" relation="include">
        </childnode>
        <childnode refid="4278" relation="include">
        </childnode>
      </node>
      <node id="4270">
        <label>Clock_impl.hpp</label>
        <link refid="_clock__impl_8hpp_source"/>
        <childnode refid="4271" relation="include">
        </childnode>
        <childnode refid="4215" relation="include">
        </childnode>
        <childnode refid="4213" relation="include">
        </childnode>
        <childnode refid="4272" relation="include">
        </childnode>
        <childnode refid="4273" relation="include">
        </childnode>
        <childnode refid="4274" relation="include">
        </childnode>
        <childnode refid="4275" relation="include">
        </childnode>
        <childnode refid="4211" relation="include">
        </childnode>
      </node>
      <node id="4243">
        <label>eggs/variant.hpp</label>
      </node>
      <node id="4253">
        <label>ossia/editor/expression/expression.hpp</label>
        <link refid="expression_8hpp_source"/>
        <childnode refid="4254" relation="include">
        </childnode>
        <childnode refid="4265" relation="include">
        </childnode>
        <childnode refid="4266" relation="include">
        </childnode>
        <childnode refid="4267" relation="include">
        </childnode>
        <childnode refid="4268" relation="include">
        </childnode>
        <childnode refid="4249" relation="include">
        </childnode>
      </node>
      <node id="4213">
        <label>cmath</label>
      </node>
      <node id="4230">
        <label>ossia/detail/destination_index.hpp</label>
        <link refid="destination__index_8hpp_source"/>
        <childnode refid="4231" relation="include">
        </childnode>
      </node>
      <node id="4239">
        <label>string</label>
      </node>
      <node id="4269">
        <label>ossia/network/base/node.hpp</label>
        <link refid="node_8hpp_source"/>
        <childnode refid="4250" relation="include">
        </childnode>
        <childnode refid="4245" relation="include">
        </childnode>
        <childnode refid="4232" relation="include">
        </childnode>
        <childnode refid="4216" relation="include">
        </childnode>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4239" relation="include">
        </childnode>
        <childnode refid="4264" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4214">
        <label>ossia_export.h</label>
      </node>
      <node id="4254">
        <label>ossia/editor/expression/expression_atom.hpp</label>
        <link refid="expression__atom_8hpp_source"/>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4249" relation="include">
        </childnode>
        <childnode refid="4222" relation="include">
        </childnode>
        <childnode refid="4255" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4255">
        <label>ossia/network/base/address.hpp</label>
        <link refid="address_8hpp_source"/>
        <childnode refid="4250" relation="include">
        </childnode>
        <childnode refid="4230" relation="include">
        </childnode>
        <childnode refid="4232" relation="include">
        </childnode>
        <childnode refid="4256" relation="include">
        </childnode>
        <childnode refid="4216" relation="include">
        </childnode>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4264" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4212">
        <label>ossia/editor/scenario/time_value.hpp</label>
        <link refid="time__value_8hpp_source"/>
        <childnode refid="4213" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4241">
        <label>ossia/editor/value/vec.hpp</label>
        <link refid="vec_8hpp_source"/>
        <childnode refid="4242" relation="include">
        </childnode>
      </node>
      <node id="4268">
        <label>ossia/editor/expression/expression_pulse.hpp</label>
        <link refid="expression__pulse_8hpp_source"/>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4249" relation="include">
        </childnode>
        <childnode refid="4222" relation="include">
        </childnode>
        <childnode refid="4255" relation="include">
        </childnode>
        <childnode refid="4269" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4238">
        <label>ossia/editor/value/string.hpp</label>
        <link refid="string_8hpp_source"/>
        <childnode refid="4214" relation="include">
        </childnode>
        <childnode refid="4239" relation="include">
        </childnode>
      </node>
      <node id="4274">
        <label>ratio</label>
      </node>
      <node id="4223">
        <label>ossia/editor/value/value_base.hpp</label>
        <link refid="value__base_8hpp_source"/>
        <childnode refid="4224" relation="include">
        </childnode>
        <childnode refid="4227" relation="include">
        </childnode>
        <childnode refid="4228" relation="include">
        </childnode>
        <childnode refid="4229" relation="include">
        </childnode>
        <childnode refid="4235" relation="include">
        </childnode>
        <childnode refid="4236" relation="include">
        </childnode>
        <childnode refid="4237" relation="include">
        </childnode>
        <childnode refid="4238" relation="include">
        </childnode>
        <childnode refid="4240" relation="include">
        </childnode>
        <childnode refid="4241" relation="include">
        </childnode>
      </node>
      <node id="4250">
        <label>ossia/detail/callback_container.hpp</label>
        <link refid="callback__container_8hpp_source"/>
        <childnode refid="4251" relation="include">
        </childnode>
      </node>
      <node id="4227">
        <label>ossia/editor/value/bool.hpp</label>
        <link refid="bool_8hpp_source"/>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4256">
        <label>ossia/network/domain/domain.hpp</label>
        <link refid="domain_8hpp_source"/>
        <childnode refid="4257" relation="include">
        </childnode>
        <childnode refid="4258" relation="include">
        </childnode>
      </node>
      <node id="4261">
        <label>boost/container/flat_set.hpp</label>
      </node>
      <node id="4232">
        <label>ossia/network/common/address_properties.hpp</label>
        <link refid="address__properties_8hpp_source"/>
      </node>
      <node id="4272">
        <label>ctime</label>
      </node>
      <node id="4234">
        <label>vector</label>
      </node>
      <node id="4209">
        <label>Scenario_impl.hpp</label>
        <link refid="_scenario__impl_8hpp_source"/>
        <childnode refid="4210" relation="include">
        </childnode>
        <childnode refid="4247" relation="include">
        </childnode>
        <childnode refid="4248" relation="include">
        </childnode>
        <childnode refid="4252" relation="include">
        </childnode>
        <childnode refid="4218" relation="include">
        </childnode>
        <childnode refid="4212" relation="include">
        </childnode>
        <childnode refid="4270" relation="include">
        </childnode>
        <childnode refid="4209" relation="include">
        </childnode>
        <childnode refid="4276" relation="include">
        </childnode>
        <childnode refid="4277" relation="include">
        </childnode>
        <childnode refid="4278" relation="include">
        </childnode>
        <childnode refid="4279" relation="include">
        </childnode>
        <childnode refid="4251" relation="include">
        </childnode>
        <childnode refid="4226" relation="include">
        </childnode>
      </node>
      <node id="4211">
        <label>ossia/editor/scenario/clock.hpp</label>
        <link refid="clock_8hpp_source"/>
        <childnode refid="4212" relation="include">
        </childnode>
        <childnode refid="4215" relation="include">
        </childnode>
        <childnode refid="4216" relation="include">
        </childnode>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4259">
        <label>ossia/detail/math.hpp</label>
        <link refid="math_8hpp"/>
        <childnode refid="4213" relation="include">
        </childnode>
      </node>
      <node id="4228">
        <label>ossia/editor/value/char.hpp</label>
        <link refid="char_8hpp_source"/>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4245">
        <label>ossia/detail/ptr_container.hpp</label>
        <link refid="ptr__container_8hpp_source"/>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4234" relation="include">
        </childnode>
      </node>
      <node id="4226">
        <label>utility</label>
      </node>
      <node id="4242">
        <label>array</label>
      </node>
      <node id="4229">
        <label>ossia/editor/value/destination.hpp</label>
        <link refid="destination_8hpp_source"/>
        <childnode refid="4230" relation="include">
        </childnode>
        <childnode refid="4232" relation="include">
        </childnode>
        <childnode refid="4233" relation="include">
        </childnode>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
        <childnode refid="4234" relation="include">
        </childnode>
      </node>
      <node id="4264">
        <label>nano_signal_slot.hpp</label>
      </node>
      <node id="4247">
        <label>ossia/editor/scenario/time_constraint.hpp</label>
        <link refid="time__constraint_8hpp_source"/>
        <childnode refid="4216" relation="include">
        </childnode>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4239" relation="include">
        </childnode>
        <childnode refid="4245" relation="include">
        </childnode>
        <childnode refid="4211" relation="include">
        </childnode>
        <childnode refid="4212" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4237">
        <label>ossia/editor/value/int.hpp</label>
        <link refid="int_8hpp_source"/>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4235">
        <label>ossia/editor/value/float.hpp</label>
        <link refid="float_8hpp_source"/>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4248">
        <label>ossia/editor/scenario/time_event.hpp</label>
        <link refid="time__event_8hpp_source"/>
        <childnode refid="4216" relation="include">
        </childnode>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4239" relation="include">
        </childnode>
        <childnode refid="4245" relation="include">
        </childnode>
        <childnode refid="4249" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4225">
        <label>ossia/editor/curve/curve_abstract.hpp</label>
        <link refid="curve__abstract_8hpp_source"/>
        <childnode refid="4214" relation="include">
        </childnode>
        <childnode refid="4226" relation="include">
        </childnode>
      </node>
      <node id="4246">
        <label>ossia/editor/state/state_element_fwd.hpp</label>
        <link refid="state__element__fwd_8hpp_source"/>
        <childnode refid="4243" relation="include">
        </childnode>
      </node>
      <node id="4277">
        <label>TimeNode_impl.hpp</label>
        <link refid="_time_node__impl_8hpp_source"/>
        <childnode refid="4253" relation="include">
        </childnode>
        <childnode refid="4247" relation="include">
        </childnode>
        <childnode refid="4252" relation="include">
        </childnode>
        <childnode refid="4248" relation="include">
        </childnode>
        <childnode refid="4212" relation="include">
        </childnode>
      </node>
      <node id="4283">
        <label>iostream</label>
      </node>
      <node id="4244">
        <label>ossia/editor/state/state.hpp</label>
        <link refid="state_8hpp_source"/>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4245" relation="include">
        </childnode>
        <childnode refid="4246" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4222">
        <label>ossia/editor/value/value.hpp</label>
        <link refid="value_8hpp_source"/>
        <childnode refid="4223" relation="include">
        </childnode>
        <childnode refid="4243" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4267">
        <label>ossia/editor/expression/expression_not.hpp</label>
        <link refid="expression__not_8hpp_source"/>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4249" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4284">
        <label>unordered_map</label>
      </node>
      <node id="4210">
        <label>ossia/editor/scenario/scenario.hpp</label>
        <link refid="scenario_8hpp_source"/>
        <childnode refid="4211" relation="include">
        </childnode>
        <childnode refid="4218" relation="include">
        </childnode>
        <childnode refid="4244" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4249">
        <label>ossia/editor/expression/expression_fwd.hpp</label>
        <link refid="expression__fwd_8hpp_source"/>
        <childnode refid="4250" relation="include">
        </childnode>
        <childnode refid="4243" relation="include">
        </childnode>
        <childnode refid="4216" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4219">
        <label>ossia/editor/state/state_element.hpp</label>
        <link refid="state__element_8hpp_source"/>
        <childnode refid="4220" relation="include">
        </childnode>
        <childnode refid="4221" relation="include">
        </childnode>
        <childnode refid="4244" relation="include">
        </childnode>
        <childnode refid="4246" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4273">
        <label>mutex</label>
      </node>
      <node id="4215">
        <label>chrono</label>
      </node>
      <node id="4258">
        <label>ossia/network/domain/domain_base.hpp</label>
        <link refid="domain__base_8hpp_source"/>
        <childnode refid="4259" relation="include">
        </childnode>
        <childnode refid="4222" relation="include">
        </childnode>
        <childnode refid="4260" relation="include">
        </childnode>
        <childnode refid="4261" relation="include">
        </childnode>
        <childnode refid="4262" relation="include">
        </childnode>
        <childnode refid="4263" relation="include">
        </childnode>
      </node>
      <node id="4262">
        <label>boost/optional.hpp</label>
      </node>
      <node id="4275">
        <label>thread</label>
      </node>
      <node id="4263">
        <label>type_traits</label>
      </node>
      <node id="4224">
        <label>ossia/editor/value/behavior.hpp</label>
        <link refid="behavior_8hpp_source"/>
        <childnode refid="4225" relation="include">
        </childnode>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4208">
        <label>Scenario_impl.cpp</label>
        <link refid="Scenario_impl.cpp"/>
        <childnode refid="4209" relation="include">
        </childnode>
        <childnode refid="4280" relation="include">
        </childnode>
        <childnode refid="4283" relation="include">
        </childnode>
        <childnode refid="4284" relation="include">
        </childnode>
      </node>
      <node id="4281">
        <label>algorithm</label>
      </node>
      <node id="4265">
        <label>ossia/editor/expression/expression_bool.hpp</label>
        <link refid="expression__bool_8hpp_source"/>
        <childnode refid="4249" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4231">
        <label>boost/container/static_vector.hpp</label>
      </node>
      <node id="4280">
        <label>ossia/detail/algorithms.hpp</label>
        <link refid="algorithms_8hpp_source"/>
        <childnode refid="4281" relation="include">
        </childnode>
        <childnode refid="4263" relation="include">
        </childnode>
        <childnode refid="4282" relation="include">
        </childnode>
      </node>
      <node id="4266">
        <label>ossia/editor/expression/expression_composition.hpp</label>
        <link refid="expression__composition_8hpp_source"/>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4249" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4217">
        <label>memory</label>
      </node>
      <node id="4233">
        <label>initializer_list</label>
      </node>
      <node id="4220">
        <label>ossia/editor/state/custom_state.hpp</label>
        <link refid="custom__state_8hpp_source"/>
        <childnode refid="4216" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4252">
        <label>ossia/editor/scenario/time_node.hpp</label>
        <link refid="time__node_8hpp_source"/>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4239" relation="include">
        </childnode>
        <childnode refid="4245" relation="include">
        </childnode>
        <childnode refid="4253" relation="include">
        </childnode>
        <childnode refid="4248" relation="include">
        </childnode>
        <childnode refid="4212" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
      </node>
      <node id="4278">
        <label>ossia/editor/scenario/detail/TimeConstraint_impl.hpp</label>
        <link refid="_time_constraint__impl_8hpp_source"/>
        <childnode refid="4211" relation="include">
        </childnode>
        <childnode refid="4247" relation="include">
        </childnode>
        <childnode refid="4248" relation="include">
        </childnode>
        <childnode refid="4218" relation="include">
        </childnode>
        <childnode refid="4212" relation="include">
        </childnode>
        <childnode refid="4244" relation="include">
        </childnode>
        <childnode refid="4270" relation="include">
        </childnode>
        <childnode refid="4276" relation="include">
        </childnode>
        <childnode refid="4277" relation="include">
        </childnode>
        <childnode refid="4278" relation="include">
        </childnode>
        <childnode refid="4279" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceossia">ossia</innernamespace>
    <innernamespace refid="namespaceossia_1_1detail">ossia::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Scenario_impl.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ossia/detail/algorithms.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceossia" kindref="compound">ossia</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedetail" kindref="compound">detail</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal">scenario_impl::scenario_impl()<sp/>:<sp/>time_process_impl()</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>start<sp/>TimeNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>mTimeNodes.push_back(<ref refid="classossia_1_1time__node_1a656e374c3249674cb23bb0ff24f6e1be" kindref="member">time_node::create</ref>());</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">scenario_impl::~scenario_impl()</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DateMap<sp/>=<sp/>std::unordered_map&lt;time_node*,<sp/>time_value&gt;;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>EventPtr<sp/>=<sp/>std::shared_ptr&lt;ossia::time_event&gt;;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ConstraintPtr<sp/>=<sp/>std::shared_ptr&lt;ossia::time_constraint&gt;;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_timenode_dates(<ref refid="classossia_1_1time__node" kindref="compound">time_node</ref>&amp;<sp/>t,<sp/>DateMap&amp;<sp/>map)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>map.insert(std::make_pair(&amp;t,<sp/>t.<ref refid="classossia_1_1time__node_1a04f63e38412bfbc74295e521dfb314c5" kindref="member">getDate</ref>()));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(EventPtr&amp;<sp/>ev<sp/>:<sp/>t.<ref refid="classossia_1_1time__node_1a52e5c3ea646557c202782e4c7cabed9f" kindref="member">timeEvents</ref>())</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ConstraintPtr&amp;<sp/>cst<sp/>:<sp/>ev-&gt;nextTimeConstraints())</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>process_timenode_dates(*cst-&gt;getEndEvent()-&gt;getTimeNode(),<sp/>map);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="namespaceossia_1ac2fcaa5e0ff809d85f9d4f43520f2f39" kindref="member">state_element</ref><sp/>scenario_impl::offset(<ref refid="classossia_1_1time__value" kindref="compound">time_value</ref><sp/><ref refid="classossia_1_1time__process_1a92c95de9f0ccb5bc02dec36876797d50" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent-&gt;getRunning())</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;parent<sp/>time<sp/>constraint<sp/>is<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>internal<sp/>offset<sp/>list<sp/>and<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>mPastEventList.clear();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="classossia_1_1state" kindref="compound">ossia::state</ref><sp/>cur_state;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Precompute<sp/>the<sp/>default<sp/>date<sp/>of<sp/>every<sp/>timenode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;time_node*,<sp/>time_value&gt;<sp/>time_map;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>process_timenode_dates(*mTimeNodes[0],<sp/>time_map);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>*every*<sp/>time<sp/>constraint<sp/>prior<sp/>to<sp/>this<sp/>one<sp/>to<sp/>be<sp/>rigid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>:<sp/>this<sp/>change<sp/>the<sp/>semantics<sp/>of<sp/>the<sp/>score<sp/>and<sp/>should<sp/>not<sp/>be<sp/>done<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>only<sp/>a<sp/>temporary<sp/>bugfix<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/OSSIA/i-score/issues/253<sp/>.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>elt<sp/>:<sp/>time_map)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elt.second<sp/>&lt;<sp/>offset)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(EventPtr&amp;<sp/>ev<sp/>:<sp/>elt.first-&gt;timeEvents())</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ConstraintPtr&amp;<sp/>cst_ptr<sp/>:<sp/>ev-&gt;previousTimeConstraints())</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cst<sp/>=<sp/>*cst_ptr;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dur<sp/>=<sp/>cst.getDurationNominal();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cst.setDurationMin(dur);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cst.setDurationMax(dur);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(EventPtr&amp;<sp/>ev_ptr<sp/>:<sp/>elt.first-&gt;timeEvents())</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ConstraintPtr&amp;<sp/>cst_ptr<sp/>:<sp/>ev_ptr-&gt;previousTimeConstraints())</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cst<sp/>=<sp/>*cst_ptr;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>start_tn<sp/>=<sp/>cst.getStartEvent()-&gt;getTimeNode();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_date<sp/>=<sp/>time_map.at(start_tn.get());</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_date<sp/>&lt;<sp/>offset)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dur<sp/>=<sp/>cst.getDurationNominal();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dur_min<sp/>=<sp/>cst.getDurationMin();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dur_min<sp/>&lt;<sp/>dur)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cst.setDurationMin(offset<sp/>-<sp/>start_date);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>propagate<sp/>offset<sp/>from<sp/>the<sp/>first<sp/>TimeNode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>process_offset(mTimeNodes[0],<sp/>offset);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>mPastEventList<sp/>by<sp/>date</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>mPastEventList.sort();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>offset<sp/>state<sp/>from<sp/>all<sp/>ordered<sp/>past<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>p<sp/>:<sp/>mPastEventList)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceossia_1aed564e77a88d3a74abd2bb99732dbd14" kindref="member">flatten_and_filter</ref>(cur_state,<sp/>p.second-&gt;getState());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>offset<sp/>all<sp/>TimeConstraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>timeConstraint<sp/>:<sp/>mTimeContraints)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cst<sp/>=<sp/>*timeConstraint;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>offset<sp/>TimeConstraint&apos;s<sp/>Clock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classossia_1_1time__value" kindref="compound">time_value</ref><sp/>constraintOffset</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offset<sp/>-<sp/>cst.getStartEvent()-&gt;getTimeNode()-&gt;getDate();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(constraintOffset<sp/>&gt;=<sp/>Zero<sp/>&amp;&amp;<sp/>constraintOffset<sp/>&lt;=<sp/>cst.getDurationMax())</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceossia_1aed564e77a88d3a74abd2bb99732dbd14" kindref="member">flatten_and_filter</ref>(cur_state,<sp/>cst.offset(constraintOffset));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cur_state;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="namespaceossia_1ac2fcaa5e0ff809d85f9d4f43520f2f39" kindref="member">state_element</ref><sp/>scenario_impl::state()</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>par<sp/>=<sp/>*parent;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!par.getRunning())</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;parent<sp/>time<sp/>constraint<sp/>is<sp/>not<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>date<sp/>hasn&apos;t<sp/>been<sp/>processed<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="classossia_1_1time__value" kindref="compound">time_value</ref><sp/>date<sp/>=<sp/>par.getDate();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(date<sp/>!=<sp/>mLastDate)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prev_last_date<sp/>=<sp/>mLastDate;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>mLastDate<sp/>=<sp/>date;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classossia_1_1state" kindref="compound">ossia::state</ref><sp/>cur_state;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>internal<sp/>mCurrentState</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>the<sp/>scenario<sp/>from<sp/>the<sp/>first<sp/>TimeNode<sp/>to<sp/>the<sp/>running<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr_container&lt;time_event&gt;<sp/>statusChangedEvents;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;time_node_impl&gt;<sp/>n</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::dynamic_pointer_cast&lt;time_node_impl&gt;(mTimeNodes[0]);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>n-&gt;process(statusChangedEvents);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>the<sp/>state<sp/>of<sp/>each<sp/>newly<sp/>HAPPENED<sp/>TimeEvent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>timeEvent<sp/>:<sp/>statusChangedEvents)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ev<sp/>=<sp/>*timeEvent;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ev.getStatus()<sp/>==<sp/>time_event::Status::HAPPENED)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceossia_1aed564e77a88d3a74abd2bb99732dbd14" kindref="member">flatten_and_filter</ref>(cur_state,<sp/>ev.getState());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>the<sp/>time<sp/>of<sp/>each<sp/>running<sp/>TimeConstraint<sp/>flows<sp/>and<sp/>add<sp/>their<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>:<sp/>this<sp/>means<sp/>TimeConstraint&apos;s<sp/>state<sp/>can<sp/>overwrite<sp/>TimeEvent&apos;s<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>timeConstraint<sp/>:<sp/>mTimeContraints)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cst<sp/>=<sp/>*timeConstraint;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cst.getDriveMode()<sp/>!=<sp/>clock::DriveMode::EXTERNAL)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>pattern<sp/>constraint<sp/>clock<sp/>is<sp/>supposed<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;be<sp/>in<sp/>EXTERNAL<sp/>drive<sp/>mode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cst.getRunning())</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>tick<sp/>if<sp/>the<sp/>TimeConstraint<sp/>is<sp/>starting<sp/>to<sp/>avoid<sp/>double<sp/>ticks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>startEvent<sp/>=<sp/>cst.getStartEvent();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>not_starting<sp/>=<sp/>none_of(</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statusChangedEvents,<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;time_event&gt;&amp;<sp/>ev)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ev-&gt;getStatus()<sp/>==<sp/>time_event::Status::HAPPENED</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>ev<sp/>==<sp/>startEvent;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not_starting)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>such<sp/>event<sp/>found<sp/>:<sp/>not<sp/>starting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev_last_date<sp/>==<sp/>Infinite)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cst.tick();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cst.tick((date<sp/>-<sp/>prev_last_date)<sp/>*<sp/>1000.);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>advance<sp/>the<sp/>constraint<sp/>so<sp/>that<sp/>we<sp/>don&apos;t<sp/>loose<sp/>time</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO<sp/>getDate<sp/>is<sp/>worst-case<sp/>linear,<sp/>maybe<sp/>we<sp/>should<sp/>cache<sp/>it<sp/>to</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>have<sp/>the<sp/>executedDate<sp/>in<sp/>constant<sp/>time<sp/>?</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(prev_last_date<sp/>==<sp/>Infinite)</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cst.tick();</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cst.tick(((date<sp/>-<sp/>cst.getStartEvent()-&gt;getTimeNode()-&gt;getDate())*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1000.));</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>time<sp/>constraint<sp/>is<sp/>still<sp/>running<sp/>after<sp/>the<sp/>tick</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cst.getRunning())</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceossia_1aed564e77a88d3a74abd2bb99732dbd14" kindref="member">flatten_and_filter</ref>(cur_state,<sp/>cst.state());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>all<sp/>the<sp/>TimeEvents<sp/>are<sp/>not<sp/>NONE<sp/>:<sp/>the<sp/>Scenario<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done<sp/>=<sp/>!any_of(mTimeNodes,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;time_node&gt;&amp;<sp/>tn)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>any_of(</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tn-&gt;timeEvents(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;time_event&gt;&amp;<sp/>ev)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ev-&gt;getStatus()<sp/>==<sp/>time_event::Status::NONE;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>Scenario<sp/>is<sp/>done<sp/>:<sp/>stop<sp/>the<sp/>parent<sp/>TimeConstraint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(done)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(date<sp/>&gt;<sp/>par.getDurationMin())</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cur_state;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scenario_impl::start()</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>each<sp/>TimeConstraint<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>timeConstraint<sp/>:<sp/>mTimeContraints)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cst<sp/>=<sp/>*timeConstraint;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classossia_1_1time__event_1ad803b6146b46ce12fbb832695243d257" kindref="member">time_event::Status</ref><sp/>startStatus<sp/>=<sp/>cst.getStartEvent()-&gt;getStatus();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classossia_1_1time__event_1ad803b6146b46ce12fbb832695243d257" kindref="member">time_event::Status</ref><sp/>endStatus<sp/>=<sp/>cst.getEndEvent()-&gt;getStatus();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>constraint<sp/>is<sp/>in<sp/>the<sp/>past</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startStatus<sp/>==<sp/>time_event::Status::HAPPENED</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>endStatus<sp/>==<sp/>time_event::Status::HAPPENED)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>start<sp/>of<sp/>the<sp/>constraint<sp/>is<sp/>pending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startStatus<sp/>==<sp/>time_event::Status::PENDING</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>endStatus<sp/>==<sp/>time_event::Status::NONE)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>constraint<sp/>is<sp/>supposed<sp/>to<sp/>be<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startStatus<sp/>==<sp/>time_event::Status::HAPPENED</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>endStatus<sp/>==<sp/>time_event::Status::NONE)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cst.start();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>end<sp/>of<sp/>the<sp/>constraint<sp/>is<sp/>pending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startStatus<sp/>==<sp/>time_event::Status::HAPPENED</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>endStatus<sp/>==<sp/>time_event::Status::PENDING)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cst.start();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>constraint<sp/>is<sp/>in<sp/>the<sp/>future</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startStatus<sp/>==<sp/>time_event::Status::NONE</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>endStatus<sp/>==<sp/>time_event::Status::NONE)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TimeEvent&apos;s<sp/>status<sp/>configuration<sp/>of<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TimeConstraint<sp/>is<sp/>not<sp/>handled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scenario_impl::stop()</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>each<sp/>running<sp/>TimeConstraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>timeConstraint<sp/>:<sp/>mTimeContraints)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cst<sp/>=<sp/>*timeConstraint;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cst.getRunning())</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cst.stop();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scenario_impl::pause()</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pause<sp/>all<sp/>running<sp/>TimeConstraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>timeConstraint<sp/>:<sp/>mTimeContraints)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cst<sp/>=<sp/>*timeConstraint;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cst.getRunning())</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cst.pause();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scenario_impl::resume()</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>resume<sp/>all<sp/>running<sp/>TimeConstraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>timeConstraint<sp/>:<sp/>mTimeContraints)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cst<sp/>=<sp/>*timeConstraint;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cst.getRunning())</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cst.resume();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scenario_impl::addTimeConstraint(</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;time_constraint&gt;<sp/>timeConstraint)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cst<sp/>=<sp/>*timeConstraint;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>TimeConstraint<sp/>if<sp/>it<sp/>is<sp/>not<sp/>already<sp/>stored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!contains(mTimeContraints,<sp/>timeConstraint))</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>mTimeContraints.push_back(std::move(timeConstraint));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>TimeConstraint&apos;s<sp/>start<sp/>node<sp/>if<sp/>it<sp/>is<sp/>not<sp/>already<sp/>stored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><ref refid="classossia_1_1scenario_1a15ddba42f1557fe9d972a4b1f88e358e" kindref="member">addTimeNode</ref>(cst.getStartEvent()-&gt;getTimeNode());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>TimeConstraint&apos;s<sp/>end<sp/>node<sp/>if<sp/>it<sp/>is<sp/>not<sp/>already<sp/>stored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="classossia_1_1scenario_1a15ddba42f1557fe9d972a4b1f88e358e" kindref="member">addTimeNode</ref>(cst.getEndEvent()-&gt;getTimeNode());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>TimeConstraint&apos;s<sp/>clock<sp/>in<sp/>external<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>cst.setDriveMode(clock::DriveMode::EXTERNAL);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scenario_impl::removeTimeConstraint(</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;time_constraint&gt;&amp;<sp/>timeConstraint)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>remove_one(mTimeContraints,<sp/>timeConstraint);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>TimeConstraint&apos;s<sp/>clock<sp/>in<sp/>none<sp/>external<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>timeConstraint-&gt;setDriveMode(clock::DriveMode::INTERNAL);</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scenario_impl::addTimeNode(std::shared_ptr&lt;time_node&gt;<sp/>timeNode)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>a<sp/>TimeNode<sp/>if<sp/>it<sp/>is<sp/>not<sp/>already<sp/>stored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!contains(mTimeNodes,<sp/>timeNode))</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>mTimeNodes.push_back(std::move(timeNode));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scenario_impl::removeTimeNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;time_node&gt;&amp;<sp/>timeNode)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>remove_one(mTimeNodes,<sp/>timeNode);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;time_node&gt;&amp;<sp/>scenario_impl::getStartTimeNode()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="353"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mTimeNodes[0];</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ptr_container&lt;time_node&gt;&amp;<sp/>scenario_impl::timeNodes()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="358"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mTimeNodes;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ptr_container&lt;time_constraint&gt;&amp;<sp/>scenario_impl::timeConstraints()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="363"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mTimeContraints;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scenario_impl::process_offset(</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;time_node&gt;<sp/>timenode,<sp/><ref refid="classossia_1_1time__value" kindref="compound">time_value</ref><sp/>offset)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><ref refid="classossia_1_1time__value" kindref="compound">time_value</ref><sp/>date<sp/>=<sp/>timenode-&gt;getDate();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>event<sp/>:<sp/>timenode-&gt;timeEvents())</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classossia_1_1time__event_1ad803b6146b46ce12fbb832695243d257" kindref="member">time_event::Status</ref><sp/>eventStatus;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>event<sp/>status<sp/>considering<sp/>its<sp/>time<sp/>node<sp/>date</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(date<sp/>&lt;<sp/>offset)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>expressions::evaluate(event-&gt;getExpression())</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>time_event::Status::HAPPENED</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>time_event::Status::DISPOSED;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(date<sp/>==<sp/>offset)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>time_event::Status::PENDING;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>time_event::Status::NONE;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>event<sp/>status<sp/>considering<sp/>previous<sp/>time<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>timeConstraint<sp/>:<sp/>event-&gt;previousTimeConstraints())</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classossia_1_1time__value" kindref="compound">time_value</ref><sp/>constraintOffset</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offset<sp/>-<sp/>timeConstraint-&gt;getStartEvent()-&gt;getTimeNode()-&gt;getDate();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(constraintOffset<sp/>&lt;<sp/>Zero)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>time_event::Status::NONE;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraintOffset<sp/>&gt;=<sp/>Zero</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>constraintOffset<sp/>&lt;=<sp/>timeConstraint-&gt;getDurationMax())</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>constraintOffset<sp/>&gt;<sp/>timeConstraint-&gt;getDurationMin()</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>time_event::Status::PENDING</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>time_event::Status::NONE;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(constraintOffset<sp/>&gt;<sp/>timeConstraint-&gt;getDurationMax())</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>expressions::evaluate(event-&gt;getExpression())</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>time_event::Status::HAPPENED</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>time_event::Status::DISPOSED;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>event<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;time_event_impl&gt;<sp/>e</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::dynamic_pointer_cast&lt;time_event_impl&gt;(event);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>e-&gt;setStatus(eventStatus);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>HAPPENED<sp/>event<sp/>to<sp/>offset<sp/>event<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventStatus<sp/>==<sp/>time_event::Status::HAPPENED)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mPastEventList.push_back(std::make_pair(date,<sp/>event));</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>propagate<sp/>offset<sp/>processing<sp/>to<sp/>setup<sp/>all<sp/>TimeEvents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>timeConstraint<sp/>:<sp/>event-&gt;nextTimeConstraints())</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>process_offset(timeConstraint-&gt;getEndEvent()-&gt;getTimeNode(),<sp/><ref refid="classossia_1_1time__process_1a92c95de9f0ccb5bc02dec36876797d50" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/tmp/i-score/API/OSSIA/ossia/editor/scenario/detail/Scenario_impl.cpp"/>
  </compounddef>
</doxygen>
