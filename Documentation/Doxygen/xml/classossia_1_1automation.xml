<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classossia_1_1automation" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>ossia::automation</compoundname>
    <basecompoundref refid="classossia_1_1time__process" prot="public" virt="non-virtual">ossia::time_process</basecompoundref>
    <derivedcompoundref refid="classossia_1_1detail_1_1automation__impl" prot="public" virt="non-virtual">ossia::detail::automation_impl</derivedcompoundref>
    <includes refid="automation_8hpp" local="no">automation.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classossia_1_1automation_1a485a136e95501a7633de9d7957038f99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classossia_1_1automation" kindref="compound">automation</ref> &gt;</type>
        <definition>std::shared_ptr&lt; automation &gt; ossia::automation::create</definition>
        <argsstring>(net::address_base &amp;, const value &amp;)</argsstring>
        <name>create</name>
        <param>
          <type><ref refid="classossia_1_1net_1_1address__base" kindref="compound">net::address_base</ref> &amp;</type>
          <defname>address</defname>
        </param>
        <param>
          <type>const <ref refid="classossia_1_1value" kindref="compound">value</ref> &amp;</type>
          <defname>drive</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>factory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>address to drive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>how</parametername>
</parameternamelist>
<parameterdescription>
<para>to drive the address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new automation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/automation/automation.hpp" line="38" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/automation/automation.cpp" bodystart="7" bodyend="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classossia_1_1automation_1ae73fc76bbe56c2c5b3b0af154a000a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>ossia::automation::~automation</definition>
        <argsstring>()</argsstring>
        <name>~automation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/automation/automation.hpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classossia_1_1automation_1a4d3a554dbd0ffe376ab225b19722e46d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classossia_1_1net_1_1address__base" kindref="compound">net::address_base</ref> &amp;</type>
        <definition>virtual const net::address_base&amp; ossia::automation::getDrivenAddress</definition>
        <argsstring>() const =0</argsstring>
        <name>getDrivenAddress</name>
        <reimplementedby refid="classossia_1_1detail_1_1automation__impl_1a02ba5ad1c96390c177774d4ba0c4b2a6">getDrivenAddress</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/automation/automation.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classossia_1_1automation_1adb95415cf4e64cf011993f4c73c97c44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classossia_1_1value" kindref="compound">value</ref> &amp;</type>
        <definition>virtual const value&amp; ossia::automation::getDriving</definition>
        <argsstring>() const =0</argsstring>
        <name>getDriving</name>
        <reimplementedby refid="classossia_1_1detail_1_1automation__impl_1ab06327095557105b3f8aa9190eedf8b5">getDriving</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/tmp/i-score/API/OSSIA/ossia/editor/automation/automation.hpp" line="44" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The automation class. </para>    </briefdescription>
    <detaileddescription>
<para>An automation is a time process that represents a curve of one or multiple parameters.</para><para>It drives (i.e. sends messages) to an address, according to a driving value. Its driven <ref refid="classossia_1_1net_1_1address__base" kindref="compound">net::address_base</ref> can be either of numeric type (val_type::INT, val_type::FLOAT...) or of <ref refid="namespaceossia_1a3ffbe4af0c7e8ac5cf1503a72f2a6197a5f6f02198ea426cd88e552e6a59ba307" kindref="member">val_type::TUPLE</ref>, if the tuple only has numeric elements (e.g. <ref refid="structossia_1_1_tuple" kindref="compound">Tuple</ref>{<ref refid="structossia_1_1_float" kindref="compound">Float</ref>, <ref refid="structossia_1_1_float" kindref="compound">Float</ref>}).</para><para>The driving <ref refid="classossia_1_1value" kindref="compound">value</ref> can either be a single <ref refid="structossia_1_1_behavior" kindref="compound">Behavior</ref> or a <ref refid="structossia_1_1_tuple" kindref="compound">Tuple</ref> of <ref refid="structossia_1_1_behavior" kindref="compound">Behavior</ref>, in accordance to the type of the driven <ref refid="classossia_1_1net_1_1address__base" kindref="compound">net::address_base</ref>.</para><para><simplesect kind="see"><para><ref refid="structossia_1_1_behavior" kindref="compound">Behavior</ref> <ref refid="classossia_1_1curve" kindref="compound">curve</ref> <ref refid="namespaceossia_1a3864160b52657c18d819ab3f02e04268" kindref="member">curve_segment</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="9">
        <label>ossia::time_process</label>
        <link refid="classossia_1_1time__process"/>
      </node>
      <node id="10">
        <label>ossia::detail::automation_impl</label>
        <link refid="classossia_1_1detail_1_1automation__impl"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>ossia::automation</label>
        <link refid="classossia_1_1automation"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="12">
        <label>ossia::time_process</label>
        <link refid="classossia_1_1time__process"/>
      </node>
      <node id="11">
        <label>ossia::automation</label>
        <link refid="classossia_1_1automation"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/tmp/i-score/API/OSSIA/ossia/editor/automation/automation.hpp" line="31" column="1" bodyfile="/tmp/i-score/API/OSSIA/ossia/editor/automation/automation.hpp" bodystart="30" bodyend="45"/>
    <listofallmembers>
      <member refid="classossia_1_1automation_1a485a136e95501a7633de9d7957038f99" prot="public" virt="non-virtual"><scope>ossia::automation</scope><name>create</name></member>
      <member refid="classossia_1_1automation_1a4d3a554dbd0ffe376ab225b19722e46d" prot="public" virt="pure-virtual"><scope>ossia::automation</scope><name>getDrivenAddress</name></member>
      <member refid="classossia_1_1automation_1adb95415cf4e64cf011993f4c73c97c44" prot="public" virt="pure-virtual"><scope>ossia::automation</scope><name>getDriving</name></member>
      <member refid="classossia_1_1time__process_1a92c95de9f0ccb5bc02dec36876797d50" prot="public" virt="pure-virtual"><scope>ossia::automation</scope><name>offset</name></member>
      <member refid="classossia_1_1time__process_1a10614dc2642a86e19a393a09c416a5a9" prot="public" virt="non-virtual"><scope>ossia::automation</scope><name>parent</name></member>
      <member refid="classossia_1_1time__process_1a422f665c7d123d7f278b69a1078fa7af" prot="public" virt="virtual"><scope>ossia::automation</scope><name>pause</name></member>
      <member refid="classossia_1_1time__process_1a8820b0944cadf7b6b3c4d000404e385b" prot="public" virt="virtual"><scope>ossia::automation</scope><name>resume</name></member>
      <member refid="classossia_1_1time__process_1ad2548b4db49e9bb0b7e37bd2078d3add" prot="public" virt="virtual"><scope>ossia::automation</scope><name>start</name></member>
      <member refid="classossia_1_1time__process_1abddea425be33b2e6d08c548a9443f6ed" prot="public" virt="pure-virtual"><scope>ossia::automation</scope><name>state</name></member>
      <member refid="classossia_1_1time__process_1a2b36f9175d11512bb66593c94a3d2e17" prot="public" virt="virtual"><scope>ossia::automation</scope><name>stop</name></member>
      <member refid="classossia_1_1automation_1ae73fc76bbe56c2c5b3b0af154a000a2b" prot="public" virt="virtual"><scope>ossia::automation</scope><name>~automation</name></member>
      <member refid="classossia_1_1time__process_1a1ce7e65bd4252a07c65ccc0f74090c11" prot="public" virt="virtual"><scope>ossia::automation</scope><name>~time_process</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
